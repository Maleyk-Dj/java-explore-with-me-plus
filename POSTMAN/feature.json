{
	"info": {
		"_postman_id": "e61ba024-ba95-41bc-b109-c61b611455d2",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37792827"
	},
	"item": [
		{
			"name": "Create comment user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\r",
							"        const content = rnd.getWord(50);\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"commentText\", rnd.getWord(50));\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üìÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\", content);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await main();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"{{commentText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{test_user_id}}/comment?eventId={{test_event_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{test_user_id}}",
						"comment"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{test_event_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update comment user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"commentText\", rnd.getWord(50));\r",
							"        pm.collectionVariables.set(\"test_comment_id\", comment.id);\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üìÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Å—Ç–∞—Ä—ã–π):\", comment);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await main();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"{{commentText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{test_user_id}}/comment/{{test_comment_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{test_user_id}}",
						"comment",
						"{{test_comment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comment user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"test_comment_id\", comment.id);\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üìÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):\", comment);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await main();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/{{test_user_id}}/comment/{{test_comment_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{test_user_id}}",
						"comment",
						"{{test_comment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\r",
							"        const comment1 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        const comment2 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        const comment3 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üìÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\", comment1 + \" \" + comment2 + \" \" + comment3);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await main();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/{{test_user_id}}/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{test_user_id}}",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comment by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"test_comment_id\", comment.id);\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üìÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\", comment.id);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await main();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/comment/{{test_comment_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment",
						"{{test_comment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments filter",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\r",
							"        const comment1 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        const comment2 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        const comment3 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        \r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"        console.log(\"üìÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\", comment1.id + \", \" + comment2.id + \", \" + comment3.id);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await main();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/comment?userId={{test_user_id}}&eventId={{test_event_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comment"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{test_user_id}}"
						},
						{
							"key": "eventId",
							"value": "{{test_event_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comments by ids",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\r",
							"        const comment1 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        const comment2 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        const comment3 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"\r",
							"        // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å id –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å\r",
							"        const commentsIds = [comment1.id, comment2.id, comment3.id];\r",
							"\r",
							"        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
							"        pm.collectionVariables.set(\"test_user_id\", user.id);\r",
							"        pm.collectionVariables.set(\"test_event_id\", event.id);\r",
							"        pm.collectionVariables.set(\"test_comment_ids\", commentsIds)\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({ commentsIds: commentsIds }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"        console.log(\"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\");\r",
							"        console.log(\"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:\", user.id);\r",
							"        console.log(\"üìÖ –°–æ–±—ã—Ç–∏–µ ID:\", event.id);\r",
							"    } catch (err) {\r",
							"        console.error(\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => {\r",
							"    try {\r",
							"        await main();\r",
							"    } catch (e) {\r",
							"        console.error(e);\r",
							"    } finally {\r",
							"        clearInterval(interval);\r",
							"    }\r",
							"}, 100);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addComment(userId, eventId, comment, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/comment?eventId=\" + eventId, comment, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–∏: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–±—ã—Ç–∏—è\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ post-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ patch-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ get-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–∫–∞.\\n\", err,\r",
					"                             \"\\n–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–∞–∫–æ–π –∂–µ –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ \" + \r",
					"                             \"–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è - \", response.code, \", —Ç–µ–ª–æ: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getComment() {\r",
					"        return {\r",
					"            content: pm.variables.replaceIn('{{$randomWord}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": ""
		},
		{
			"key": "commentText",
			"value": ""
		},
		{
			"key": "test_comment_ids",
			"value": ""
		},
		{
			"key": "test_user_id",
			"value": ""
		},
		{
			"key": "test_event_id",
			"value": ""
		},
		{
			"key": "test_comment_id",
			"value": ""
		}
	]
}